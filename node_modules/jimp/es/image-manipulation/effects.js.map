{"version":3,"sources":["../../src/image-manipulation/effects.js"],"names":["log","clear","isNodePattern","throwError","mulTable","shgTable","blur","r","cb","call","rsum","gsum","bsum","asum","x","y","i","p","p1","p2","yp","yi","yw","pa","wm","bitmap","width","hm","height","rad1","mulSum","shgSum","red","green","blue","alpha","vmin","vmax","iterations","data","dither565","rgb565Matrix","scanQuiet","idx","thresholdId","dither","Math","min","dither16","histogram","Array","fill","g","b","index","normalize","h","value","max","getBounds","histogramChannel","findIndex","slice","reverse","bounds","invert","gaussian","rs","ceil","round","wsum","iy","ix","x1","y1","dsq","wght","exp","PI","composite","src","constructor","baseImage","sx","sy","dstIdx","getPixelIndex","fg","a","bg","limit255","blit","srcx","srcy","srcw","srch","maxw","maxh","mask","w","destX","destY","avg"],"mappings":"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","sourcesContent":["import { log, clear } from '../utils/log';\nimport { isNodePattern, throwError } from '../utils/error-checking';\nimport { mulTable, shgTable } from './blur-tables';\n\n/*\n    Superfast Blur (0.5)\n    http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n\n    Copyright (c) 2011 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * A fast blur algorithm that produces similar effect to a Gausian blur - but MUCH quicker\n * @param {number} r the pixel radius of the blur\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function blur(r, cb) {\n    if (typeof r !== 'number')\n        return throwError.call(this, 'r must be a number', cb);\n    if (r < 1) return throwError.call(this, 'r must be greater than 0', cb);\n\n    let rsum;\n    let gsum;\n    let bsum;\n    let asum;\n    let x;\n    let y;\n    let i;\n    let p;\n    let p1;\n    let p2;\n    let yp;\n    let yi;\n    let yw;\n    let pa;\n\n    const wm = this.bitmap.width - 1;\n    const hm = this.bitmap.height - 1;\n    // const wh = this.bitmap.width * this.bitmap.height;\n    const rad1 = r + 1;\n\n    const mulSum = mulTable[r];\n    const shgSum = shgTable[r];\n\n    const red = [];\n    const green = [];\n    const blue = [];\n    const alpha = [];\n\n    const vmin = [];\n    const vmax = [];\n\n    let iterations = 2;\n\n    while (iterations-- > 0) {\n        yi = 0;\n        yw = 0;\n\n        for (y = 0; y < this.bitmap.height; y++) {\n            rsum = this.bitmap.data[yw] * rad1;\n            gsum = this.bitmap.data[yw + 1] * rad1;\n            bsum = this.bitmap.data[yw + 2] * rad1;\n            asum = this.bitmap.data[yw + 3] * rad1;\n\n            for (i = 1; i <= r; i++) {\n                p = yw + ((i > wm ? wm : i) << 2);\n                rsum += this.bitmap.data[p++];\n                gsum += this.bitmap.data[p++];\n                bsum += this.bitmap.data[p++];\n                asum += this.bitmap.data[p];\n            }\n\n            for (x = 0; x < this.bitmap.width; x++) {\n                red[yi] = rsum;\n                green[yi] = gsum;\n                blue[yi] = bsum;\n                alpha[yi] = asum;\n\n                if (y === 0) {\n                    vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n                    vmax[x] = (p = x - r) > 0 ? p << 2 : 0;\n                }\n\n                p1 = yw + vmin[x];\n                p2 = yw + vmax[x];\n\n                rsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                gsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                bsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                asum += this.bitmap.data[p1] - this.bitmap.data[p2];\n\n                yi++;\n            }\n            yw += this.bitmap.width << 2;\n        }\n\n        for (x = 0; x < this.bitmap.width; x++) {\n            yp = x;\n            rsum = red[yp] * rad1;\n            gsum = green[yp] * rad1;\n            bsum = blue[yp] * rad1;\n            asum = alpha[yp] * rad1;\n\n            for (i = 1; i <= r; i++) {\n                yp += i > hm ? 0 : this.bitmap.width;\n                rsum += red[yp];\n                gsum += green[yp];\n                bsum += blue[yp];\n                asum += alpha[yp];\n            }\n\n            yi = x << 2;\n\n            for (y = 0; y < this.bitmap.height; y++) {\n                pa = (asum * mulSum) >>> shgSum;\n                this.bitmap.data[yi + 3] = pa;\n\n                // normalize alpha\n                if (pa > 255) {\n                    this.bitmap.data[yi + 3] = 255;\n                }\n\n                if (pa > 0) {\n                    pa = 255 / pa;\n                    this.bitmap.data[yi] = ((rsum * mulSum) >>> shgSum) * pa;\n                    this.bitmap.data[yi + 1] =\n                        ((gsum * mulSum) >>> shgSum) * pa;\n                    this.bitmap.data[yi + 2] =\n                        ((bsum * mulSum) >>> shgSum) * pa;\n                } else {\n                    this.bitmap.data[yi + 2] = 0;\n                    this.bitmap.data[yi + 1] = 0;\n                    this.bitmap.data[yi] = 0;\n                }\n\n                if (x === 0) {\n                    vmin[y] =\n                        ((p = y + rad1) < hm ? p : hm) * this.bitmap.width;\n                    vmax[y] = (p = y - r) > 0 ? p * this.bitmap.width : 0;\n                }\n\n                p1 = x + vmin[y];\n                p2 = x + vmax[y];\n\n                rsum += red[p1] - red[p2];\n                gsum += green[p1] - green[p2];\n                bsum += blue[p1] - blue[p2];\n                asum += alpha[p1] - alpha[p2];\n\n                yi += this.bitmap.width << 2;\n            }\n        }\n    }\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Apply a ordered dithering effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function dither565(cb) {\n    const rgb565Matrix = [\n        1,\n        9,\n        3,\n        11,\n        13,\n        5,\n        15,\n        7,\n        4,\n        12,\n        2,\n        10,\n        16,\n        8,\n        14,\n        6\n    ];\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        const thresholdId = ((y & 3) << 2) + (x % 4);\n        const dither = rgb565Matrix[thresholdId];\n        this.bitmap.data[idx] = Math.min(this.bitmap.data[idx] + dither, 0xff);\n        this.bitmap.data[idx + 1] = Math.min(\n            this.bitmap.data[idx + 1] + dither,\n            0xff\n        );\n        this.bitmap.data[idx + 2] = Math.min(\n            this.bitmap.data[idx + 2] + dither,\n            0xff\n        );\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n// alternative reference\nexport const dither16 = dither565;\n\n/**\n * Get an image's histogram\n * @return {object} An object with an array of color occurrence counts for each channel (r,g,b)\n */\nfunction histogram() {\n    const histogram = {\n        r: new Array(256).fill(0),\n        g: new Array(256).fill(0),\n        b: new Array(256).fill(0)\n    };\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        index\n    ) {\n        histogram.r[this.bitmap.data[index + 0]]++;\n        histogram.g[this.bitmap.data[index + 1]]++;\n        histogram.b[this.bitmap.data[index + 2]]++;\n    });\n\n    return histogram;\n}\n\n/**\n * Normalizes the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function normalize(cb) {\n    const h = histogram.call(this);\n\n    /**\n     * Normalize values\n     * @param  {integer} value Pixel channel value.\n     * @param  {integer} min   Minimum value for channel\n     * @param  {integer} max   Maximum value for channel\n     * @return {integer} normalized values\n     */\n    const normalize = function(value, min, max) {\n        return ((value - min) * 255) / (max - min);\n    };\n\n    const getBounds = function(histogramChannel) {\n        return [\n            histogramChannel.findIndex(value => value > 0),\n            255 -\n                histogramChannel\n                    .slice()\n                    .reverse()\n                    .findIndex(value => value > 0)\n        ];\n    };\n\n    // store bounds (minimum and maximum values)\n    const bounds = {\n        r: getBounds(h.r),\n        g: getBounds(h.g),\n        b: getBounds(h.b)\n    };\n\n    // apply value transformations\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        const r = this.bitmap.data[idx + 0];\n        const g = this.bitmap.data[idx + 1];\n        const b = this.bitmap.data[idx + 2];\n\n        this.bitmap.data[idx + 0] = normalize(r, bounds.r[0], bounds.r[1]);\n        this.bitmap.data[idx + 1] = normalize(g, bounds.g[0], bounds.g[1]);\n        this.bitmap.data[idx + 2] = normalize(b, bounds.b[0], bounds.b[1]);\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n        this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n        this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Applies a true Gaussian blur to the image (warning: this is VERY slow)\n * @param {number} r the pixel radius of the blur\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function gaussian(r, cb) {\n    // http://blog.ivank.net/fastest-gaussian-blur.html\n    if (typeof r !== 'number') {\n        return throwError.call(this, 'r must be a number', cb);\n    }\n\n    if (r < 1) {\n        return throwError.call(this, 'r must be greater than 0', cb);\n    }\n\n    const rs = Math.ceil(r * 2.57); // significant radius\n\n    for (let y = 0; y < this.bitmap.height; y++) {\n        log('Gaussian: ' + Math.round((y / this.bitmap.height) * 100) + '%');\n\n        for (let x = 0; x < this.bitmap.width; x++) {\n            let red = 0;\n            let green = 0;\n            let blue = 0;\n            let alpha = 0;\n            let wsum = 0;\n\n            for (let iy = y - rs; iy < y + rs + 1; iy++) {\n                for (let ix = x - rs; ix < x + rs + 1; ix++) {\n                    const x1 = Math.min(this.bitmap.width - 1, Math.max(0, ix));\n                    const y1 = Math.min(\n                        this.bitmap.height - 1,\n                        Math.max(0, iy)\n                    );\n                    const dsq = (ix - x) * (ix - x) + (iy - y) * (iy - y);\n                    const wght =\n                        Math.exp(-dsq / (2 * r * r)) / (Math.PI * 2 * r * r);\n                    const idx = (y1 * this.bitmap.width + x1) << 2;\n\n                    red += this.bitmap.data[idx] * wght;\n                    green += this.bitmap.data[idx + 1] * wght;\n                    blue += this.bitmap.data[idx + 2] * wght;\n                    alpha += this.bitmap.data[idx + 3] * wght;\n                    wsum += wght;\n                }\n\n                const idx = (y * this.bitmap.width + x) << 2;\n\n                this.bitmap.data[idx] = Math.round(red / wsum);\n                this.bitmap.data[idx + 1] = Math.round(green / wsum);\n                this.bitmap.data[idx + 2] = Math.round(blue / wsum);\n                this.bitmap.data[idx + 3] = Math.round(alpha / wsum);\n            }\n        }\n    }\n\n    clear(); // clear the log\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Composites a source image over to this image respecting alpha channels\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the x position to blit the image\n * @param {number} y the y position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function composite(src, x, y, cb) {\n    if (!(src instanceof this.constructor)) {\n        return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const baseImage = this;\n\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(\n        sx,\n        sy,\n        idx\n    ) {\n        // http://stackoverflow.com/questions/7438263/alpha-compositing-algorithm-blend-modes\n        const dstIdx = baseImage.getPixelIndex(x + sx, y + sy);\n\n        const fg = {\n            r: this.bitmap.data[idx + 0] / 255,\n            g: this.bitmap.data[idx + 1] / 255,\n            b: this.bitmap.data[idx + 2] / 255,\n            a: this.bitmap.data[idx + 3] / 255\n        };\n\n        const bg = {\n            r: baseImage.bitmap.data[dstIdx + 0] / 255,\n            g: baseImage.bitmap.data[dstIdx + 1] / 255,\n            b: baseImage.bitmap.data[dstIdx + 2] / 255,\n            a: baseImage.bitmap.data[dstIdx + 3] / 255\n        };\n\n        const a = bg.a + fg.a - bg.a * fg.a;\n\n        const r = (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / a;\n        const g = (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / a;\n        const b = (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / a;\n\n        baseImage.bitmap.data[dstIdx + 0] = this.constructor.limit255(r * 255);\n        baseImage.bitmap.data[dstIdx + 1] = this.constructor.limit255(g * 255);\n        baseImage.bitmap.data[dstIdx + 2] = this.constructor.limit255(b * 255);\n        baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(a * 255);\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Blits a source image on to this image\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the x position to blit the image\n * @param {number} y the y position to blit the image\n * @param {number} srcx (optional) the x position from which to crop the source image\n * @param {number} srcy (optional) the y position from which to crop the source image\n * @param {number} srcw (optional) the width to which to crop the source image\n * @param {number} srch (optional) the height to which to crop the source image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n    if (!(src instanceof this.constructor)) {\n        return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof srcx === 'function') {\n        cb = srcx;\n        srcx = 0;\n        srcy = 0;\n        srcw = src.bitmap.width;\n        srch = src.bitmap.height;\n    } else if (\n        typeof srcx === typeof srcy &&\n        typeof srcy === typeof srcw &&\n        typeof srcw === typeof srch\n    ) {\n        srcx = srcx || 0;\n        srcy = srcy || 0;\n        srcw = srcw || src.bitmap.width;\n        srch = srch || src.bitmap.height;\n    } else {\n        return throwError.call(\n            this,\n            'srcx, srcy, srcw, srch must be numbers',\n            cb\n        );\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // round input\n    srcx = Math.round(srcx);\n    srcy = Math.round(srcy);\n    srcw = Math.round(srcw);\n    srch = Math.round(srch);\n\n    const maxw = this.bitmap.width;\n    const maxh = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(srcx, srcy, srcw, srch, function(sx, sy, idx) {\n        if (\n            x + sx >= 0 &&\n            y + sy >= 0 &&\n            maxw - x - sx > 0 &&\n            maxh - y - sy > 0\n        ) {\n            const dstIdx = baseImage.getPixelIndex(\n                x + sx - srcx,\n                y + sy - srcy\n            );\n            baseImage.bitmap.data[dstIdx] = this.bitmap.data[idx];\n            baseImage.bitmap.data[dstIdx + 1] = this.bitmap.data[idx + 1];\n            baseImage.bitmap.data[dstIdx + 2] = this.bitmap.data[idx + 2];\n            baseImage.bitmap.data[dstIdx + 3] = this.bitmap.data[idx + 3];\n        }\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport function mask(src, x = 0, y = 0, cb) {\n    if (!(src instanceof this.constructor)) {\n        return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const w = this.bitmap.width;\n    const h = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(\n        sx,\n        sy,\n        idx\n    ) {\n        const destX = x + sx;\n        const destY = y + sy;\n\n        if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n            const dstIdx = baseImage.getPixelIndex(destX, destY);\n            const { data } = this.bitmap;\n            const avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n\n            baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n        }\n    });\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n"],"file":"effects.js"}