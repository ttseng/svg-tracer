{"version":3,"sources":["../src/index.js"],"names":["FS","Path","EventEmitter","anyBase","bMFont","MkDirP","pixelMatch","ImagePHash","request","text","shape","color","effects","promisify","MIME","clear","parseBitmap","getBuffer","getBufferAsync","isNodePattern","throwError","constants","alphabet","maxHashLength","NaN","i","maxHash","BIN","slice","Array","join","push","length","process","on","noop","isArrayBuffer","test","Object","prototype","toString","call","toLowerCase","indexOf","bufferFromArrayBuffer","arrayBuffer","buffer","Buffer","alloc","byteLength","view","Uint8Array","loadBufferFromPath","src","cb","readFile","match","err","response","data","isBuffer","msg","statusCode","Error","emptyBitmap","width","height","Jimp","args","PNG_FILTER_AUTO","MIME_PNG","path","write","mime","getBase64","getPixelColor","setPixelColor","jimpInstance","finish","evData","methodName","setTimeout","emitError","emitMulti","parseInt","w","h","_background","bitmap","writeUInt32BE","original","scanQuiet","x","y","idx","readUInt32BE","_quality","_deflateLevel","_deflateStrategy","_filterType","_rgba","_originalMime","extraConstructor","__extraConstructors","find","c","Promise","resolve","reject","run","then","catch","eventName","assign","emit","getMIME","getExtension","createWriteStream","getType","pathObj","parse","dir","sync","stream","end","l","Math","round","s","f","bool","n","AUTO","base","hash","getHash","edgeHandling","xi","yi","EDGE_EXTEND","EDGE_WRAP","getPixelIndex","hex","entries","forEach","name","value","appendConstructorOption","read","image","create","rgbaToInt","r","g","b","a","pow","intToRGBA","rgba","floor","limit255","max","min","diff","img1","img2","threshold","bmp1","bmp2","cloneQuiet","resize","numDiffPixels","percent","distance","phash","hash1","hash2","colorDiff","rgba1","rgba2","maxVal","loadPages","pages","newPages","map","page","all","loadFont","file","font","chars","kernings","String","fromCharCode","id","firstString","first","second","amount","dirname","common","info","jimpEvMethod","evName","method","evNameBefore","evNameAfter","replace","wrappedCb","apply","result","clone","jimpEvChange","_y","_x","offset","from","env","ENVIRONMENT","gl","window","self"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,QAAzB;AAEA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,KAAKC,IAAZ,MAAsB,2BAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,cAAjC,QAAuD,sBAAvD;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,wBAA1C;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,IAAMC,QAAQ,GACV,kEADJ,C,CAGA;AACA;;AACA,IAAMC,aAAa,GAAG,CAACC,GAAD,EAAMA,GAAN,CAAtB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,MAAMC,OAAO,GAAGvB,OAAO,CAACA,OAAO,CAACwB,GAAT,EAAcL,QAAQ,CAACM,KAAT,CAAe,CAAf,EAAkBH,CAAlB,CAAd,CAAP,CACZ,IAAII,KAAJ,CAAU,KAAK,CAAf,EAAkBC,IAAlB,CAAuB,GAAvB,CADY,CAAhB;AAGAP,EAAAA,aAAa,CAACQ,IAAd,CAAmBL,OAAO,CAACM,MAA3B;AACH;;AAEDC,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmBnB,KAAnB,E,CAEA;;AACA,SAASoB,IAAT,GAAgB,CAAE,C,CAElB;;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SACIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CACKC,IADL,CACUJ,IADV,EAEKK,WAFL,GAGKC,OAHL,CAGa,aAHb,IAG8B,CAAC,CAJnC;AAMH,C,CAED;AACA;;;AACA,SAASC,qBAAT,CAA+BC,WAA/B,EAA4C;AACxC,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaH,WAAW,CAACI,UAAzB,CAAf;AACA,MAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeN,WAAf,CAAb;;AAEA,OAAK,IAAIpB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGqB,MAAM,CAACd,MAA3B,EAAmC,EAAEP,EAArC,EAAwC;AACpCqB,IAAAA,MAAM,CAACrB,EAAD,CAAN,GAAYyB,IAAI,CAACzB,EAAD,CAAhB;AACH;;AAED,SAAOqB,MAAP;AACH;;AAED,SAASM,kBAAT,CAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACjC,MACItD,EAAE,IACF,OAAOA,EAAE,CAACuD,QAAV,KAAuB,UADvB,IAEA,CAACF,GAAG,CAACG,KAAJ,CAAU,qBAAV,CAHL,EAIE;AACExD,IAAAA,EAAE,CAACuD,QAAH,CAAYF,GAAZ,EAAiBC,EAAjB;AACH,GAND,MAMO;AACH9C,IAAAA,OAAO,CAAC6C,GAAD,EAAM,UAACI,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AAClC,UAAIF,GAAJ,EAAS;AACL,eAAOH,EAAE,CAACG,GAAD,CAAT;AACH;;AAED,UAAI,QAAOE,IAAP,MAAgB,QAAhB,IAA4BZ,MAAM,CAACa,QAAP,CAAgBD,IAAhB,CAAhC,EAAuD;AACnD,eAAOL,EAAE,CAAC,IAAD,EAAOK,IAAP,CAAT;AACH;;AAED,UAAME,GAAG,GACL,iCACAR,GADA,GAEA,IAFA,GAGA,SAHA,GAIAK,QAAQ,CAACI,UAJT,GAKA,GANJ;AAQA,aAAO,IAAIC,KAAJ,CAAUF,GAAV,CAAP;AACH,KAlBM,CAAP;AAmBH;AACJ;;AAED,IAAMG,WAAW,GAAG;AAChBL,EAAAA,IAAI,EAAE,IADU;AAEhBM,EAAAA,KAAK,EAAE,IAFS;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAApB;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;IAQMC,I;;;;;AACF;AACA;AACA;AACA;AAGA;AASA;AAGA;AAGA;AAGA;AAGA,kBAAqB;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAAA;;AACjB;;AADiB,qFAvBZJ,WAuBY;;AAAA,uFApBV,GAoBU;;AAAA,4FAlBL,CAkBK;;AAAA,+FAhBF,CAgBE;;AAAA,0FAdPG,IAAI,CAACE,eAcE;;AAAA,oFAXb,IAWa;;AAAA,0FARP,UAQO;;AAAA,4FALLF,IAAI,CAACG,QAKA;;AAAA,oFAFb,IAEa;;AAAA,yFA2SR,UAAAC,IAAI;AAAA,aAAI1D,SAAS,CAAC,MAAK2D,KAAN,yDAAmBD,IAAnB,CAAb;AAAA,KA3SI;;AAAA,6FAycJ,UAAAE,IAAI;AAAA,aAAI5D,SAAS,CAAC,MAAK6D,SAAN,yDAAuBD,IAAvB,CAAb;AAAA,KAzcA;;AAAA,wFAyfTxD,SAzfS;;AAAA,6FA2fJC,cA3fI;;AAAA,6FAgmBJ,MAAKyD,aAhmBD;;AAAA,6FAgoBJ,MAAKC,aAhoBD;;AAGjB,QAAMC,YAAY,wDAAlB;;AACA,QAAIvB,EAAE,GAAGnB,IAAT;;AAEA,QAAIC,aAAa,CAACgC,IAAI,CAAC,CAAD,CAAL,CAAjB,EAA4B;AACxBA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUxB,qBAAqB,CAACwB,IAAI,CAAC,CAAD,CAAL,CAA/B;AACH;;AAED,aAASU,MAAT,GAAyB;AAAA,yCAANV,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAAA,UACdX,GADc,GACPW,IADO;AAErB,UAAMW,MAAM,GAAGtB,GAAG,IAAI,EAAtB;AACAsB,MAAAA,MAAM,CAACC,UAAP,GAAoB,aAApB;AAEAC,MAAAA,UAAU,CAAC,YAAM;AAAA;;AACb;AACA,YAAIxB,GAAJ,EAAS;AACLoB,UAAAA,YAAY,CAACK,SAAb,CAAuB,aAAvB,EAAsCzB,GAAtC;AACH,SAFD,MAEO;AACHoB,UAAAA,YAAY,CAACM,SAAb,CAAuB,aAAvB,EAAsC,aAAtC;AACH;;AAED,eAAA7B,EAAE,EAACb,IAAH,aAAQoC,YAAR,SAAyBT,IAAzB;AACH,OATS,EASP,CATO,CAAV;AAUH;;AAED,QACK,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IAA+B,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnD,IACCgB,QAAQ,CAAChB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAR,IAAyBgB,QAAQ,CAAChB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAFtC,EAGE;AACE;AACA,UAAMiB,CAAC,GAAGD,QAAQ,CAAChB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAlB;AACA,UAAMkB,CAAC,GAAGF,QAAQ,CAAChB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAlB;AACAd,MAAAA,EAAE,GAAGc,IAAI,CAAC,CAAD,CAAT;;AAEA,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,cAAKmB,WAAL,GAAmBnB,IAAI,CAAC,CAAD,CAAvB;AACAd,QAAAA,EAAE,GAAGc,IAAI,CAAC,CAAD,CAAT;AACH;;AAED,UAAI,OAAOd,EAAP,KAAc,WAAlB,EAA+B;AAC3BA,QAAAA,EAAE,GAAGnB,IAAL;AACH;;AAED,UAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;AAC1B,iDAAOlC,UAAU,CAACqB,IAAX,wDAAsB,uBAAtB,EAA+CqC,MAA/C,CAAP;AACH;;AAED,YAAKU,MAAL,GAAc;AACV7B,QAAAA,IAAI,EAAEZ,MAAM,CAACC,KAAP,CAAaqC,CAAC,GAAGC,CAAJ,GAAQ,CAArB,CADI;AAEVrB,QAAAA,KAAK,EAAEoB,CAFG;AAGVnB,QAAAA,MAAM,EAAEoB;AAHE,OAAd;;AAMA,WAAK,IAAI7D,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,MAAK+D,MAAL,CAAY7B,IAAZ,CAAiB3B,MAArC,EAA6CP,GAAC,IAAI,CAAlD,EAAqD;AACjD,cAAK+D,MAAL,CAAY7B,IAAZ,CAAiB8B,aAAjB,CAA+B,MAAKF,WAApC,EAAiD9D,GAAjD;AACH;;AAEDqD,MAAAA,MAAM,CAAC,IAAD,wDAAN;AACH,KAjCD,MAiCO,IAAIV,IAAI,CAAC,CAAD,CAAJ,YAAmBD,IAAvB,EAA6B;AAChC;AACA,UAAMuB,QAAQ,GAAGtB,IAAI,CAAC,CAAD,CAArB;AACAd,MAAAA,EAAE,GAAGc,IAAI,CAAC,CAAD,CAAT;;AAEA,UAAI,OAAOd,EAAP,KAAc,WAAlB,EAA+B;AAC3BA,QAAAA,EAAE,GAAGnB,IAAL;AACH;;AAED,UAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;AAC1B,iDAAOlC,UAAU,CAACqB,IAAX,wDAAsB,uBAAtB,EAA+CqC,MAA/C,CAAP;AACH;;AAED,UAAMU,MAAM,GAAGzC,MAAM,CAACC,KAAP,CAAa0C,QAAQ,CAACF,MAAT,CAAgB7B,IAAhB,CAAqB3B,MAAlC,CAAf;AACA0D,MAAAA,QAAQ,CAACC,SAAT,CACI,CADJ,EAEI,CAFJ,EAGID,QAAQ,CAACF,MAAT,CAAgBvB,KAHpB,EAIIyB,QAAQ,CAACF,MAAT,CAAgBtB,MAJpB,EAKI,UAAC0B,CAAD,EAAIC,CAAJ,EAAOC,GAAP,EAAe;AACX,YAAMnC,IAAI,GAAG+B,QAAQ,CAACF,MAAT,CAAgB7B,IAAhB,CAAqBoC,YAArB,CAAkCD,GAAlC,CAAb;AACAN,QAAAA,MAAM,CAACC,aAAP,CAAqB9B,IAArB,EAA2BmC,GAA3B;AACH,OARL;AAWA,YAAKN,MAAL,GAAc;AACV7B,QAAAA,IAAI,EAAE6B,MADI;AAEVvB,QAAAA,KAAK,EAAEyB,QAAQ,CAACF,MAAT,CAAgBvB,KAFb;AAGVC,QAAAA,MAAM,EAAEwB,QAAQ,CAACF,MAAT,CAAgBtB;AAHd,OAAd;AAMA,YAAK8B,QAAL,GAAgBN,QAAQ,CAACM,QAAzB;AACA,YAAKC,aAAL,GAAqBP,QAAQ,CAACO,aAA9B;AACA,YAAKC,gBAAL,GAAwBR,QAAQ,CAACQ,gBAAjC;AACA,YAAKC,WAAL,GAAmBT,QAAQ,CAACS,WAA5B;AACA,YAAKC,KAAL,GAAaV,QAAQ,CAACU,KAAtB;AACA,YAAKb,WAAL,GAAmBG,QAAQ,CAACH,WAA5B;AACA,YAAKc,aAAL,GAAqBX,QAAQ,CAACW,aAA9B;AAEAvB,MAAAA,MAAM,CAAC,IAAD,wDAAN;AACH,KAxCM,MAwCA,IAAI,OAAOV,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AACpC;AACA,UAAMG,IAAI,GAAGH,IAAI,CAAC,CAAD,CAAjB;AACAd,MAAAA,EAAE,GAAGc,IAAI,CAAC,CAAD,CAAT;;AAEA,UAAI,OAAOd,EAAP,KAAc,WAAlB,EAA+B;AAC3BA,QAAAA,EAAE,GAAGnB,IAAL;AACH;;AAED,UAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;AAC1B,iDAAOlC,UAAU,CAACqB,IAAX,wDAAsB,uBAAtB,EAA+CqC,MAA/C,CAAP;AACH;;AAED1B,MAAAA,kBAAkB,CAACmB,IAAD,EAAO,UAACd,GAAD,EAAME,IAAN,EAAe;AACpC,YAAIF,GAAJ,EAAS;AACL,iBAAOrC,UAAU,CAACqB,IAAX,wDAAsBgB,GAAtB,EAA2BqB,MAA3B,CAAP;AACH;;AAED9D,QAAAA,WAAW,CAACyB,IAAZ,wDAAuBkB,IAAvB,EAA6BY,IAA7B,EAAmCO,MAAnC;AACH,OANiB,CAAlB;AAOH,KApBM,MAoBA,IAAI,QAAOV,IAAI,CAAC,CAAD,CAAX,MAAmB,QAAnB,IAA+BrB,MAAM,CAACa,QAAP,CAAgBQ,IAAI,CAAC,CAAD,CAApB,CAAnC,EAA6D;AAChE;AACA,UAAMT,IAAI,GAAGS,IAAI,CAAC,CAAD,CAAjB;AACAd,MAAAA,EAAE,GAAGc,IAAI,CAAC,CAAD,CAAT;;AAEA,UAAI,OAAOd,EAAP,KAAc,UAAlB,EAA8B;AAC1B,iDAAOlC,UAAU,CAACqB,IAAX,wDAAsB,uBAAtB,EAA+CqC,MAA/C,CAAP;AACH;;AAED9D,MAAAA,WAAW,CAACyB,IAAZ,wDAAuBkB,IAAvB,EAA6B,IAA7B,EAAmCmB,MAAnC;AACH,KAVM,MAUA;AACH;AACA;AACAxB,MAAAA,EAAE,GAAGc,IAAI,CAACA,IAAI,CAACpC,MAAL,GAAc,CAAf,CAAT;;AAEA,UAAI,OAAOsB,EAAP,KAAc,UAAlB,EAA8B;AAC1B;AACAA,QAAAA,EAAE,GAAGc,IAAI,CAACA,IAAI,CAACpC,MAAL,GAAc,CAAf,CAAT;;AAEA,YAAI,OAAOsB,EAAP,KAAc,UAAlB,EAA8B;AAC1BA,UAAAA,EAAE,GAAGnB,IAAL;AACH;AACJ;;AAED,UAAMmE,gBAAgB,GAAGnC,IAAI,CAACoC,mBAAL,CAAyBC,IAAzB,CAA8B,UAAAC,CAAC;AAAA,eACpDA,CAAC,CAACpE,IAAF,OAAAoE,CAAC,EAASrC,IAAT,CADmD;AAAA,OAA/B,CAAzB;;AAIA,UAAIkC,gBAAJ,EAAsB;AAClB,YAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA;;AAAA,iBACR,yBAAAN,gBAAgB,CAACO,GAAjB,EAAqBpE,IAArB,sFAAgCkE,OAAhC,EAAyCC,MAAzC,SAAoDxC,IAApD,EADQ;AAAA,SAAZ,EAGK0C,IAHL,CAGU;AAAA,iBAAMhC,MAAM,CAAC,IAAD,wDAAZ;AAAA,SAHV,EAIKiC,KAJL,CAIWjC,MAJX;AAKH,OAND,MAMO;AACH,iDAAO1D,UAAU,CAACqB,IAAX,wDAEH,oDACI,2DAHD,EAIHqC,MAJG,CAAP;AAMH;AACJ;;AAlKgB;AAmKpB;AAED;;;;;;;;;;8BAMUE,U,EAAYgC,S,EAAsB;AAAA,UAAXrD,IAAW,uEAAJ,EAAI;AACxCA,MAAAA,IAAI,GAAGrB,MAAM,CAAC2E,MAAP,CAActD,IAAd,EAAoB;AAAEqB,QAAAA,UAAU,EAAVA,UAAF;AAAcgC,QAAAA,SAAS,EAATA;AAAd,OAApB,CAAP;AACA,WAAKE,IAAL,CAAU,KAAV,EAAiBvD,IAAjB;;AAEA,UAAIqB,UAAJ,EAAgB;AACZ,aAAKkC,IAAL,CAAUlC,UAAV,EAAsBrB,IAAtB;AACH;;AAED,WAAKuD,IAAL,CAAUF,SAAV,EAAqBrD,IAArB;AACH;;;8BAESqB,U,EAAYvB,G,EAAK;AACvB,WAAK0B,SAAL,CAAeH,UAAf,EAA2B,OAA3B,EAAoCvB,GAApC;AACH;AAED;;;;;;;gCAIY;AACR,aAAO,KAAK+B,MAAL,CAAYtB,MAAnB;AACH;AAED;;;;;;;+BAIW;AACP,aAAO,KAAKsB,MAAL,CAAYvB,KAAnB;AACH;AAED;;;;;;;8BAIU;AACN,aACI,YACC,KAAKuB,MAAL,KAAgBxB,WAAhB,GACK,YADL,GAEK,KAAKwB,MAAL,CAAYvB,KAAZ,GAAoB,GAApB,GAA0B,KAAKuB,MAAL,CAAYtB,MAH5C,IAIA,GALJ;AAOH;AAED;;;;;;;+BAIW;AACP,aAAO,eAAP;AACH;AAED;;;;;;;8BAIU;AACN,UAAMO,IAAI,GAAG,KAAK4B,aAAL,IAAsBlC,IAAI,CAACG,QAAxC;AAEA,aAAOG,IAAP;AACH;AAED;;;;;;;mCAIe;AACX,UAAMA,IAAI,GAAG,KAAK0C,OAAL,EAAb;AAEA,aAAOrG,IAAI,CAACsG,YAAL,CAAkB3C,IAAlB,CAAP;AACH;AAED;;;;;;;;;0BAMMF,I,EAAMjB,E,EAAI;AAAA;;AACZ,UAAI,CAACtD,EAAD,IAAO,CAACA,EAAE,CAACqH,iBAAf,EAAkC;AAC9B,cAAM,IAAItD,KAAJ,CACF,+DADE,CAAN;AAGH;;AAED,UAAI,OAAOQ,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAOnD,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AACH;;AAED,UAAI,OAAOA,EAAP,KAAc,WAAlB,EAA+B;AAC3BA,QAAAA,EAAE,GAAGnB,IAAL;AACH;;AAED,UAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;AAC1B,eAAOlC,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AACH;;AAED,UAAMmB,IAAI,GAAG3D,IAAI,CAACwG,OAAL,CAAa/C,IAAb,CAAb;AACA,UAAMgD,OAAO,GAAGtH,IAAI,CAACuH,KAAL,CAAWjD,IAAX,CAAhB;;AAEA,UAAIgD,OAAO,CAACE,GAAZ,EAAiB;AACbpH,QAAAA,MAAM,CAACqH,IAAP,CAAYH,OAAO,CAACE,GAApB;AACH;;AAED,WAAKxG,SAAL,CAAewD,IAAf,EAAqB,UAAChB,GAAD,EAAMX,MAAN,EAAiB;AAClC,YAAIW,GAAJ,EAAS;AACL,iBAAOrC,UAAU,CAACqB,IAAX,CAAgB,MAAhB,EAAsBgB,GAAtB,EAA2BH,EAA3B,CAAP;AACH;;AAED,YAAMqE,MAAM,GAAG3H,EAAE,CAACqH,iBAAH,CAAqB9C,IAArB,CAAf;AAEAoD,QAAAA,MAAM,CACDzF,EADL,CACQ,MADR,EACgB,YAAM;AACdyF,UAAAA,MAAM,CAACnD,KAAP,CAAa1B,MAAb;AACA6E,UAAAA,MAAM,CAACC,GAAP;AACH,SAJL,EAKK1F,EALL,CAKQ,OALR,EAKiB,UAAAuB,GAAG,EAAI;AAChB,iBAAOrC,UAAU,CAACqB,IAAX,CAAgB,MAAhB,EAAsBgB,GAAtB,EAA2BH,EAA3B,CAAP;AACH,SAPL;AAQAqE,QAAAA,MAAM,CAACzF,EAAP,CAAU,QAAV,EAAoB,YAAM;AACtB,iBAAOoB,EAAE,CAACb,IAAH,CAAQ,MAAR,EAAc,IAAd,EAAoB,MAApB,CAAP;AACH,SAFD;AAGH,OAlBD;AAoBA,aAAO,IAAP;AACH;;;;AAID;;;;;;iCAMaoF,C,EAAGvE,E,EAAI;AAChB,UAAI,OAAOuE,CAAP,KAAa,QAAjB,EAA2B;AACvB,eAAOzG,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;AACH;;AAED,UAAIuE,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAjB,EAAoB;AAChB,eAAOzG,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,0BAAtB,EAAkDa,EAAlD,CAAP;AACH;;AAED,WAAK2C,aAAL,GAAqB6B,IAAI,CAACC,KAAL,CAAWF,CAAX,CAArB;;AAEA,UAAI1G,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;;;;oCAMgBuF,C,EAAG1E,E,EAAI;AACnB,UAAI,OAAO0E,CAAP,KAAa,QAAjB,EAA2B;AACvB,eAAO5G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;AACH;;AAED,UAAI0E,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAjB,EAAoB;AAChB,eAAO5G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,0BAAtB,EAAkDa,EAAlD,CAAP;AACH;;AAED,WAAK4C,gBAAL,GAAwB4B,IAAI,CAACC,KAAL,CAAWC,CAAX,CAAxB;;AAEA,UAAI7G,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;;;;+BAMWwF,C,EAAG3E,E,EAAI;AACd,UAAI,OAAO2E,CAAP,KAAa,QAAjB,EAA2B;AACvB,eAAO7G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;AACH;;AAED,UAAI2E,CAAC,GAAG,CAAC,CAAL,IAAUA,CAAC,GAAG,CAAlB,EAAqB;AACjB,eAAO7G,UAAU,CAACqB,IAAX,CACH,IADG,EAEH,uCAFG,EAGHa,EAHG,CAAP;AAKH;;AAED,WAAK6C,WAAL,GAAmB2B,IAAI,CAACC,KAAL,CAAWE,CAAX,CAAnB;;AAEA,UAAI9G,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;;;;yBAMKyF,I,EAAM5E,E,EAAI;AACX,UAAI,OAAO4E,IAAP,KAAgB,SAApB,EAA+B;AAC3B,eAAO9G,UAAU,CAACqB,IAAX,CACH,IADG,EAEH,wDAFG,EAGHa,EAHG,CAAP;AAKH;;AAED,WAAK8C,KAAL,GAAa8B,IAAb;;AAEA,UAAI/G,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;;;;4BAMQ0F,C,EAAG7E,E,EAAI;AACX,UAAI,OAAO6E,CAAP,KAAa,QAAjB,EAA2B;AACvB,eAAO/G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;AACH;;AAED,UAAI6E,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;AAClB,eAAO/G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,4BAAtB,EAAoDa,EAApD,CAAP;AACH;;AAED,WAAK0C,QAAL,GAAgB8B,IAAI,CAACC,KAAL,CAAWI,CAAX,CAAhB;;AAEA,UAAIhH,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;;;;8BAMUgC,I,EAAMnB,E,EAAI;AAChB,UAAImB,IAAI,KAAKN,IAAI,CAACiE,IAAlB,EAAwB;AACpB;AACA3D,QAAAA,IAAI,GAAG,KAAK0C,OAAL,EAAP;AACH;;AAED,UAAI,OAAO1C,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAOrD,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AACH;;AAED,UAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC1B,eAAOlC,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AACH;;AAED,WAAKrC,SAAL,CAAewD,IAAf,EAAqB,UAAShB,GAAT,EAAcE,IAAd,EAAoB;AACrC,YAAIF,GAAJ,EAAS;AACL,iBAAOrC,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsBgB,GAAtB,EAA2BH,EAA3B,CAAP;AACH;;AAED,YAAMD,GAAG,GAAG,UAAUoB,IAAV,GAAiB,UAAjB,GAA8Bd,IAAI,CAACnB,QAAL,CAAc,QAAd,CAA1C;AACA,eAAOc,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBY,GAApB,CAAP;AACH,OAPD;AASA,aAAO,IAAP;AACH;;;;AAID;;;;;;yBAMKgF,I,EAAM/E,E,EAAI;AACX+E,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,UAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC5B/E,QAAAA,EAAE,GAAG+E,IAAL;AACAA,QAAAA,IAAI,GAAG,EAAP;AACH;;AAED,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAOjH,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AACH;;AAED,UAAI+E,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EAA2B;AACvB,eAAOjH,UAAU,CAACqB,IAAX,CACH,IADG,EAEH,wCAFG,EAGHa,EAHG,CAAP;AAKH;;AAED,UAAIgF,IAAI,GAAG,IAAI/H,UAAJ,GAAiBgI,OAAjB,CAAyB,IAAzB,CAAX;AACAD,MAAAA,IAAI,GAAGnI,OAAO,CAACA,OAAO,CAACwB,GAAT,EAAcL,QAAQ,CAACM,KAAT,CAAe,CAAf,EAAkByG,IAAlB,CAAd,CAAP,CAA8CC,IAA9C,CAAP;;AAEA,aAAOA,IAAI,CAACtG,MAAL,GAAcT,aAAa,CAAC8G,IAAD,CAAlC,EAA0C;AACtCC,QAAAA,IAAI,GAAG,MAAMA,IAAb,CADsC,CACnB;AACtB;;AAED,UAAInH,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB6F,IAApB,CAAP;AACH;;AAED,aAAOA,IAAP;AACH;AAED;;;;;;;;;;AAUA;;;;;;;;kCAQc1C,C,EAAGC,C,EAAG2C,Y,EAAclF,E,EAAI;AAClC,UAAImF,EAAJ;AACA,UAAIC,EAAJ;;AAEA,UAAI,OAAOF,YAAP,KAAwB,UAAxB,IAAsC,OAAOlF,EAAP,KAAc,WAAxD,EAAqE;AACjEA,QAAAA,EAAE,GAAGkF,YAAL;AACAA,QAAAA,YAAY,GAAG,IAAf;AACH;;AAED,UAAI,CAACA,YAAL,EAAmB;AACfA,QAAAA,YAAY,GAAGrE,IAAI,CAACwE,WAApB;AACH;;AAED,UAAI,OAAO/C,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAChD,eAAOzE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;AACH,OAfiC,CAiBlC;;;AACAsC,MAAAA,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWnC,CAAX,CAAJ;AACAC,MAAAA,CAAC,GAAGiC,IAAI,CAACC,KAAL,CAAWlC,CAAX,CAAJ;AACA4C,MAAAA,EAAE,GAAG7C,CAAL;AACA8C,MAAAA,EAAE,GAAG7C,CAAL;;AAEA,UAAI2C,YAAY,KAAKrE,IAAI,CAACwE,WAA1B,EAAuC;AACnC,YAAI/C,CAAC,GAAG,CAAR,EAAW6C,EAAE,GAAG,CAAL;AACX,YAAI7C,CAAC,IAAI,KAAKJ,MAAL,CAAYvB,KAArB,EAA4BwE,EAAE,GAAG,KAAKjD,MAAL,CAAYvB,KAAZ,GAAoB,CAAzB;AAC5B,YAAI4B,CAAC,GAAG,CAAR,EAAW6C,EAAE,GAAG,CAAL;AACX,YAAI7C,CAAC,IAAI,KAAKL,MAAL,CAAYtB,MAArB,EAA6BwE,EAAE,GAAG,KAAKlD,MAAL,CAAYtB,MAAZ,GAAqB,CAA1B;AAChC;;AAED,UAAIsE,YAAY,KAAKrE,IAAI,CAACyE,SAA1B,EAAqC;AACjC,YAAIhD,CAAC,GAAG,CAAR,EAAW;AACP6C,UAAAA,EAAE,GAAG,KAAKjD,MAAL,CAAYvB,KAAZ,GAAoB2B,CAAzB;AACH;;AAED,YAAIA,CAAC,IAAI,KAAKJ,MAAL,CAAYvB,KAArB,EAA4B;AACxBwE,UAAAA,EAAE,GAAG7C,CAAC,GAAG,KAAKJ,MAAL,CAAYvB,KAArB;AACH;;AAED,YAAI4B,CAAC,GAAG,CAAR,EAAW;AACP4C,UAAAA,EAAE,GAAG,KAAKjD,MAAL,CAAYtB,MAAZ,GAAqB2B,CAA1B;AACH;;AAED,YAAIA,CAAC,IAAI,KAAKL,MAAL,CAAYtB,MAArB,EAA6B;AACzBwE,UAAAA,EAAE,GAAG7C,CAAC,GAAG,KAAKL,MAAL,CAAYtB,MAArB;AACH;AACJ;;AAED,UAAIzC,CAAC,GAAI,KAAK+D,MAAL,CAAYvB,KAAZ,GAAoByE,EAApB,GAAyBD,EAA1B,IAAiC,CAAzC,CAhDkC,CAkDlC;;AACA,UAAIA,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,KAAKjD,MAAL,CAAYvB,KAAhC,EAAuC;AACnCxC,QAAAA,CAAC,GAAG,CAAC,CAAL;AACH;;AAED,UAAIiH,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,KAAKlD,MAAL,CAAYtB,MAAhC,EAAwC;AACpCzC,QAAAA,CAAC,GAAG,CAAC,CAAL;AACH;;AAED,UAAIN,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBhB,CAApB,CAAP;AACH;;AAED,aAAOA,CAAP;AACH;AAED;;;;;;;;;;kCAOcmE,C,EAAGC,C,EAAGvC,E,EAAI;AACpB,UAAI,OAAOsC,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EACI,OAAOzE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP,CAFgB,CAIpB;;AACAsC,MAAAA,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWnC,CAAX,CAAJ;AACAC,MAAAA,CAAC,GAAGiC,IAAI,CAACC,KAAL,CAAWlC,CAAX,CAAJ;AAEA,UAAMC,GAAG,GAAG,KAAK+C,aAAL,CAAmBjD,CAAnB,EAAsBC,CAAtB,CAAZ;AACA,UAAMiD,GAAG,GAAG,KAAKtD,MAAL,CAAY7B,IAAZ,CAAiBoC,YAAjB,CAA8BD,GAA9B,CAAZ;;AAEA,UAAI3E,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBqG,GAApB,CAAP;AACH;;AAED,aAAOA,GAAP;AACH;;;;AAID;;;;;;;;kCAQcA,G,EAAKlD,C,EAAGC,C,EAAGvC,E,EAAI;AACzB,UACI,OAAOwF,GAAP,KAAe,QAAf,IACA,OAAOlD,CAAP,KAAa,QADb,IAEA,OAAOC,CAAP,KAAa,QAHjB,EAKI,OAAOzE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,8BAAtB,EAAsDa,EAAtD,CAAP,CANqB,CAQzB;;AACAsC,MAAAA,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWnC,CAAX,CAAJ;AACAC,MAAAA,CAAC,GAAGiC,IAAI,CAACC,KAAL,CAAWlC,CAAX,CAAJ;AAEA,UAAMC,GAAG,GAAG,KAAK+C,aAAL,CAAmBjD,CAAnB,EAAsBC,CAAtB,CAAZ;AACA,WAAKL,MAAL,CAAY7B,IAAZ,CAAiB8B,aAAjB,CAA+BqD,GAA/B,EAAoChD,GAApC;;AAEA,UAAI3E,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,eAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,aAAO,IAAP;AACH;;;;EA1pBcvC,Y;;AA+pBnBoC,MAAM,CAACyG,OAAP,CAAe1H,SAAf,EAA0B2H,OAA1B,CAAkC,gBAAmB;AAAA;AAAA,MAAjBC,IAAiB;AAAA,MAAXC,KAAW;;AACjD/E,EAAAA,IAAI,CAAC8E,IAAD,CAAJ,GAAaC,KAAb;AACH,CAFD;AAIA5G,MAAM,CAACyG,OAAP,mBAAoBpI,KAApB,EAA8BD,KAA9B,EAAwCD,IAAxC,EAAiDG,OAAjD,GAA4DoI,OAA5D,CACI,iBAAmB;AAAA;AAAA,MAAjBC,IAAiB;AAAA,MAAXC,KAAW;;AACf/E,EAAAA,IAAI,CAAC5B,SAAL,CAAe0G,IAAf,IAAuBC,KAAvB;AACH,CAHL;AAMA/E,IAAI,CAACoC,mBAAL,GAA2B,EAA3B;AAEA;;;;;;;AAMApC,IAAI,CAACgF,uBAAL,GAA+B,UAASF,IAAT,EAAe5G,IAAf,EAAqBwE,GAArB,EAA0B;AACrD1C,EAAAA,IAAI,CAACoC,mBAAL,CAAyBxE,IAAzB,CAA8B;AAAEkH,IAAAA,IAAI,EAAJA,IAAF;AAAQ5G,IAAAA,IAAI,EAAJA,IAAR;AAAcwE,IAAAA,GAAG,EAAHA;AAAd,GAA9B;AACH,CAFD;AAIA;;;;;;AAIA1C,IAAI,CAACiF,IAAL,GAAY,YAAkB;AAAA,qCAANhF,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC1B,SAAO,IAAIsC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,eAAIzC,IAAJ,EAAYC,IAAZ,SAAkB,UAACX,GAAD,EAAM4F,KAAN,EAAgB;AAC9B,UAAI5F,GAAJ,EAASmD,MAAM,CAACnD,GAAD,CAAN,CAAT,KACKkD,OAAO,CAAC0C,KAAD,CAAP;AACR,KAHD;AAIH,GALM,CAAP;AAMH,CAPD;;AASAlF,IAAI,CAACmF,MAAL,GAAcnF,IAAI,CAACiF,IAAnB;AAEA;;;;;;;;;;AASAjF,IAAI,CAACoF,SAAL,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBrG,EAArB,EAAyB;AACtC,MACI,OAAOkG,CAAP,KAAa,QAAb,IACA,OAAOC,CAAP,KAAa,QADb,IAEA,OAAOC,CAAP,KAAa,QAFb,IAGA,OAAOC,CAAP,KAAa,QAJjB,EAKE;AACE,WAAOvI,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,+BAAtB,EAAuDa,EAAvD,CAAP;AACH;;AAED,MAAIkG,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;AAClB,WAAOpI,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;AACH;;AAED,MAAImG,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;AAClBrI,IAAAA,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD;AACH;;AAED,MAAIoG,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;AAClB,WAAOtI,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;AACH;;AAED,MAAIqG,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;AAClB,WAAOvI,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;AACH;;AAEDkG,EAAAA,CAAC,GAAG1B,IAAI,CAACC,KAAL,CAAWyB,CAAX,CAAJ;AACAE,EAAAA,CAAC,GAAG5B,IAAI,CAACC,KAAL,CAAW2B,CAAX,CAAJ;AACAD,EAAAA,CAAC,GAAG3B,IAAI,CAACC,KAAL,CAAW0B,CAAX,CAAJ;AACAE,EAAAA,CAAC,GAAG7B,IAAI,CAACC,KAAL,CAAW4B,CAAX,CAAJ;AAEA,MAAMlI,CAAC,GACH+H,CAAC,GAAG1B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAJ,GACAH,CAAC,GAAG3B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CADJ,GAEAF,CAAC,GAAG5B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFJ,GAGAD,CAAC,GAAG7B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAJR;;AAMA,MAAIzI,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBhB,CAApB,CAAP;AACH;;AAED,SAAOA,CAAP;AACH,CA1CD;AA4CA;;;;;;;;AAMA0C,IAAI,CAAC0F,SAAL,GAAiB,UAASpI,CAAT,EAAY6B,EAAZ,EAAgB;AAC7B,MAAI,OAAO7B,CAAP,KAAa,QAAjB,EAA2B;AACvB,WAAOL,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;AACH;;AAED,MAAMwG,IAAI,GAAG,EAAb;AAEAA,EAAAA,IAAI,CAACN,CAAL,GAAS1B,IAAI,CAACiC,KAAL,CAAWtI,CAAC,GAAGqG,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAf,CAAT;AACAE,EAAAA,IAAI,CAACL,CAAL,GAAS3B,IAAI,CAACiC,KAAL,CAAW,CAACtI,CAAC,GAAGqI,IAAI,CAACN,CAAL,GAAS1B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAd,IAAkC9B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAA7C,CAAT;AACAE,EAAAA,IAAI,CAACJ,CAAL,GAAS5B,IAAI,CAACiC,KAAL,CACL,CAACtI,CAAC,GAAGqI,IAAI,CAACN,CAAL,GAAS1B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAb,GAAgCE,IAAI,CAACL,CAAL,GAAS3B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAA1C,IACI9B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFC,CAAT;AAIAE,EAAAA,IAAI,CAACH,CAAL,GAAS7B,IAAI,CAACiC,KAAL,CACL,CAACtI,CAAC,GACEqI,IAAI,CAACN,CAAL,GAAS1B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CADZ,GAEGE,IAAI,CAACL,CAAL,GAAS3B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFZ,GAGGE,IAAI,CAACJ,CAAL,GAAS5B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CAHb,IAII9B,IAAI,CAAC8B,GAAL,CAAS,GAAT,EAAc,CAAd,CALC,CAAT;;AAQA,MAAIzI,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBqH,IAApB,CAAP;AACH;;AAED,SAAOA,IAAP;AACH,CA1BD;AA4BA;;;;;;;AAKA3F,IAAI,CAAC6F,QAAL,GAAgB,UAAS7B,CAAT,EAAY;AACxBA,EAAAA,CAAC,GAAGL,IAAI,CAACmC,GAAL,CAAS9B,CAAT,EAAY,CAAZ,CAAJ;AACAA,EAAAA,CAAC,GAAGL,IAAI,CAACoC,GAAL,CAAS/B,CAAT,EAAY,GAAZ,CAAJ;AAEA,SAAOA,CAAP;AACH,CALD;AAOA;;;;;;;;;AAOAhE,IAAI,CAACgG,IAAL,GAAY,UAASC,IAAT,EAAeC,IAAf,EAAsC;AAAA,MAAjBC,SAAiB,uEAAL,GAAK;AAC9C,MAAI,EAAEF,IAAI,YAAYjG,IAAlB,KAA2B,EAAEkG,IAAI,YAAYlG,IAAlB,CAA/B,EACI,OAAO/C,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,sCAAtB,CAAP;AAEJ,MAAM8H,IAAI,GAAGH,IAAI,CAAC5E,MAAlB;AACA,MAAMgF,IAAI,GAAGH,IAAI,CAAC7E,MAAlB;;AAEA,MAAI+E,IAAI,CAACtG,KAAL,KAAeuG,IAAI,CAACvG,KAApB,IAA6BsG,IAAI,CAACrG,MAAL,KAAgBsG,IAAI,CAACtG,MAAtD,EAA8D;AAC1D,QAAIqG,IAAI,CAACtG,KAAL,GAAasG,IAAI,CAACrG,MAAlB,GAA2BsG,IAAI,CAACvG,KAAL,GAAauG,IAAI,CAACtG,MAAjD,EAAyD;AACrD;AACAkG,MAAAA,IAAI,GAAGA,IAAI,CAACK,UAAL,GAAkBC,MAAlB,CAAyBF,IAAI,CAACvG,KAA9B,EAAqCuG,IAAI,CAACtG,MAA1C,CAAP;AACH,KAHD,MAGO;AACH;AACAmG,MAAAA,IAAI,GAAGA,IAAI,CAACI,UAAL,GAAkBC,MAAlB,CAAyBH,IAAI,CAACtG,KAA9B,EAAqCsG,IAAI,CAACrG,MAA1C,CAAP;AACH;AACJ;;AAED,MAAI,OAAOoG,SAAP,KAAqB,QAArB,IAAiCA,SAAS,GAAG,CAA7C,IAAkDA,SAAS,GAAG,CAAlE,EAAqE;AACjE,WAAOlJ,UAAU,CAACqB,IAAX,CACH,IADG,EAEH,4CAFG,CAAP;AAIH;;AAED,MAAM0H,IAAI,GAAG,IAAIhG,IAAJ,CAASoG,IAAI,CAACtG,KAAd,EAAqBsG,IAAI,CAACrG,MAA1B,EAAkC,UAAlC,CAAb;AAEA,MAAMyG,aAAa,GAAGrK,UAAU,CAC5BiK,IAAI,CAAC5G,IADuB,EAE5B6G,IAAI,CAAC7G,IAFuB,EAG5BwG,IAAI,CAAC3E,MAAL,CAAY7B,IAHgB,EAI5BwG,IAAI,CAAC3E,MAAL,CAAYvB,KAJgB,EAK5BkG,IAAI,CAAC3E,MAAL,CAAYtB,MALgB,EAM5B;AAAEoG,IAAAA,SAAS,EAATA;AAAF,GAN4B,CAAhC;AASA,SAAO;AACHM,IAAAA,OAAO,EAAED,aAAa,IAAIR,IAAI,CAAC3E,MAAL,CAAYvB,KAAZ,GAAoBkG,IAAI,CAAC3E,MAAL,CAAYtB,MAApC,CADnB;AAEHmF,IAAAA,KAAK,EAAEc;AAFJ,GAAP;AAIH,CAvCD;AAyCA;;;;;;;;AAMAhG,IAAI,CAAC0G,QAAL,GAAgB,UAAST,IAAT,EAAeC,IAAf,EAAqB;AACjC,MAAMS,KAAK,GAAG,IAAIvK,UAAJ,EAAd;AACA,MAAMwK,KAAK,GAAGD,KAAK,CAACvC,OAAN,CAAc6B,IAAd,CAAd;AACA,MAAMY,KAAK,GAAGF,KAAK,CAACvC,OAAN,CAAc8B,IAAd,CAAd;AAEA,SAAOS,KAAK,CAACD,QAAN,CAAeE,KAAf,EAAsBC,KAAtB,CAAP;AACH,CAND;AAQA;;;;;;;;;;;AASA7G,IAAI,CAAC8G,SAAL,GAAiB,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AACpC,MAAMvB,GAAG,GAAG,SAANA,GAAM,CAAAzB,CAAC;AAAA,WAAIL,IAAI,CAAC8B,GAAL,CAASzB,CAAT,EAAY,CAAZ,CAAJ;AAAA,GAAb;;AADoC,MAE5B8B,GAF4B,GAEpBnC,IAFoB,CAE5BmC,GAF4B;AAGpC,MAAMmB,MAAM,GAAG,MAAM,GAAN,GAAY,CAA3B;;AAEA,MAAIF,KAAK,CAACvB,CAAN,KAAY,CAAZ,IAAiB,CAACuB,KAAK,CAACvB,CAA5B,EAA+B;AAC3BuB,IAAAA,KAAK,CAACvB,CAAN,GAAU,GAAV;AACH;;AAED,MAAIwB,KAAK,CAACxB,CAAN,KAAY,CAAZ,IAAiB,CAACwB,KAAK,CAACxB,CAA5B,EAA+B;AAC3BwB,IAAAA,KAAK,CAACxB,CAAN,GAAU,GAAV;AACH;;AAED,SACI,CAACM,GAAG,CACAL,GAAG,CAACsB,KAAK,CAAC1B,CAAN,GAAU2B,KAAK,CAAC3B,CAAjB,CADH,EAEAI,GAAG,CAACsB,KAAK,CAAC1B,CAAN,GAAU2B,KAAK,CAAC3B,CAAhB,GAAoB0B,KAAK,CAACvB,CAA1B,GAA8BwB,KAAK,CAACxB,CAArC,CAFH,CAAH,GAIGM,GAAG,CACCL,GAAG,CAACsB,KAAK,CAACzB,CAAN,GAAU0B,KAAK,CAAC1B,CAAjB,CADJ,EAECG,GAAG,CAACsB,KAAK,CAACzB,CAAN,GAAU0B,KAAK,CAAC1B,CAAhB,GAAoByB,KAAK,CAACvB,CAA1B,GAA8BwB,KAAK,CAACxB,CAArC,CAFJ,CAJN,GAQGM,GAAG,CACCL,GAAG,CAACsB,KAAK,CAACxB,CAAN,GAAUyB,KAAK,CAACzB,CAAjB,CADJ,EAECE,GAAG,CAACsB,KAAK,CAACxB,CAAN,GAAUyB,KAAK,CAACzB,CAAhB,GAAoBwB,KAAK,CAACvB,CAA1B,GAA8BwB,KAAK,CAACxB,CAArC,CAFJ,CARP,IAYAyB,MAbJ;AAeH,CA5BD;;AA8BA,SAASC,SAAT,CAAmB5D,GAAnB,EAAwB6D,KAAxB,EAA+B;AAC3B,MAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC/B,WAAOtH,IAAI,CAACiF,IAAL,CAAU3B,GAAG,GAAG,GAAN,GAAYgE,IAAtB,CAAP;AACH,GAFgB,CAAjB;AAIA,SAAO/E,OAAO,CAACgF,GAAR,CAAYH,QAAZ,CAAP;AACH;AAED;;;;;;;;AAMApH,IAAI,CAACwH,QAAL,GAAgB,UAASC,IAAT,EAAetI,EAAf,EAAmB;AAAA;;AAC/B,MAAI,OAAOsI,IAAP,KAAgB,QAApB,EACI,OAAOxK,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;AAEJ,SAAO,IAAIoD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCtD,IAAAA,EAAE,GACEA,EAAE,IACF,UAASG,GAAT,EAAcoI,IAAd,EAAoB;AAChB,UAAIpI,GAAJ,EAASmD,MAAM,CAACnD,GAAD,CAAN,CAAT,KACKkD,OAAO,CAACkF,IAAD,CAAP;AACR,KALL;;AAOAzL,IAAAA,MAAM,CAACwL,IAAD,EAAO,UAACnI,GAAD,EAAMoI,IAAN,EAAe;AACxB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,QAAQ,GAAG,EAAjB;;AAEA,UAAItI,GAAJ,EAAS;AACL,eAAOrC,UAAU,CAACqB,IAAX,CAAgB,MAAhB,EAAsBgB,GAAtB,EAA2BH,EAA3B,CAAP;AACH;;AAED,WAAK,IAAI7B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGoK,IAAI,CAACC,KAAL,CAAW9J,MAA/B,EAAuCP,GAAC,EAAxC,EAA4C;AACxCqK,QAAAA,KAAK,CAACE,MAAM,CAACC,YAAP,CAAoBJ,IAAI,CAACC,KAAL,CAAWrK,GAAX,EAAcyK,EAAlC,CAAD,CAAL,GAA+CL,IAAI,CAACC,KAAL,CAAWrK,GAAX,CAA/C;AACH;;AAED,WAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGoK,IAAI,CAACE,QAAL,CAAc/J,MAAlC,EAA0CP,GAAC,EAA3C,EAA+C;AAC3C,YAAM0K,WAAW,GAAGH,MAAM,CAACC,YAAP,CAAoBJ,IAAI,CAACE,QAAL,CAActK,GAAd,EAAiB2K,KAArC,CAApB;AACAL,QAAAA,QAAQ,CAACI,WAAD,CAAR,GAAwBJ,QAAQ,CAACI,WAAD,CAAR,IAAyB,EAAjD;AACAJ,QAAAA,QAAQ,CAACI,WAAD,CAAR,CACIH,MAAM,CAACC,YAAP,CAAoBJ,IAAI,CAACE,QAAL,CAActK,GAAd,EAAiB4K,MAArC,CADJ,IAGIR,IAAI,CAACE,QAAL,CAActK,GAAd,EAAiB6K,MAHrB;AAIH;;AAEDjB,MAAAA,SAAS,CAACpL,IAAI,CAACsM,OAAL,CAAaX,IAAb,CAAD,EAAqBC,IAAI,CAACP,KAA1B,CAAT,CAA0CxE,IAA1C,CAA+C,UAAAwE,KAAK,EAAI;AACpDhI,QAAAA,EAAE,CAAC,IAAD,EAAO;AACLwI,UAAAA,KAAK,EAALA,KADK;AAELC,UAAAA,QAAQ,EAARA,QAFK;AAGLT,UAAAA,KAAK,EAALA,KAHK;AAILkB,UAAAA,MAAM,EAAEX,IAAI,CAACW,MAJR;AAKLC,UAAAA,IAAI,EAAEZ,IAAI,CAACY;AALN,SAAP,CAAF;AAOH,OARD;AASH,KA9BK,CAAN;AA+BH,GAvCM,CAAP;AAwCH,CA5CD;AA8CA;;;;;;;;;;;;;;;;AAcA,SAASC,YAAT,CAAsB1H,UAAtB,EAAkC2H,MAAlC,EAA0CC,MAA1C,EAAkD;AAC9C,MAAMC,YAAY,GAAG,YAAYF,MAAjC;AACA,MAAMG,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAe,IAAf,EAAqB,EAArB,IAA2B,IAA/C;;AAEA5I,EAAAA,IAAI,CAAC5B,SAAL,CAAeyC,UAAf,IAA6B,YAAkB;AAC3C,QAAIgI,SAAJ;;AAD2C,uCAAN5I,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAE3C,QAAMd,EAAE,GAAGc,IAAI,CAACwI,MAAM,CAAC5K,MAAP,GAAgB,CAAjB,CAAf;AACA,QAAM6C,YAAY,GAAG,IAArB;;AAEA,QAAI,OAAOvB,EAAP,KAAc,UAAlB,EAA8B;AAC1B0J,MAAAA,SAAS,GAAG,qBAAkB;AAAA,2CAAN5I,IAAM;AAANA,UAAAA,IAAM;AAAA;;AAAA,YACnBX,GADmB,GACNW,IADM;AAAA,YACdT,IADc,GACNS,IADM;;AAG1B,YAAIX,GAAJ,EAAS;AACLoB,UAAAA,YAAY,CAACK,SAAb,CAAuBF,UAAvB,EAAmCvB,GAAnC;AACH,SAFD,MAEO;AACHoB,UAAAA,YAAY,CAACM,SAAb,CAAuBH,UAAvB,EAAmC8H,WAAnC,sBACK9H,UADL,EACkBrB,IADlB;AAGH;;AAEDL,QAAAA,EAAE,CAAC2J,KAAH,CAAS,IAAT,EAAe7I,IAAf;AACH,OAZD;;AAaAA,MAAAA,IAAI,CAACA,IAAI,CAACpC,MAAL,GAAc,CAAf,CAAJ,GAAwBgL,SAAxB;AACH,KAfD,MAeO;AACHA,MAAAA,SAAS,GAAG,KAAZ;AACH;;AAED,SAAK7H,SAAL,CAAeH,UAAf,EAA2B6H,YAA3B;AAEA,QAAIK,MAAJ;;AAEA,QAAI;AACAA,MAAAA,MAAM,GAAGN,MAAM,CAACK,KAAP,CAAa,IAAb,EAAmB7I,IAAnB,CAAT;;AAEA,UAAI,CAAC4I,SAAL,EAAgB;AACZ,aAAK7H,SAAL,CAAeH,UAAf,EAA2B8H,WAA3B,sBACK9H,UADL,EACkBkI,MADlB;AAGH;AACJ,KARD,CAQE,OAAOzJ,GAAP,EAAY;AACVA,MAAAA,GAAG,CAACuB,UAAJ,GAAiBA,UAAjB;AACA,WAAKE,SAAL,CAAeF,UAAf,EAA2BvB,GAA3B;AACH;;AAED,WAAOyJ,MAAP;AACH,GA1CD;;AA4CA/I,EAAAA,IAAI,CAAC5B,SAAL,CAAeyC,UAAU,GAAG,OAA5B,IAAuC4H,MAAvC;AACH;AAED;;;;;;;AAKAF,YAAY,CAAC,OAAD,EAAU,OAAV,EAAmB,UAASpJ,EAAT,EAAa;AACxC,MAAM6J,KAAK,GAAG,IAAIhJ,IAAJ,CAAS,IAAT,CAAd;;AAEA,MAAIhD,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ0K,KAAR,EAAe,IAAf,EAAqBA,KAArB,CAAP;AACH;;AAED,SAAOA,KAAP;AACH,CARW,CAAZ;AAUA;;;;;;AAKA,SAASC,YAAT,CAAsBpI,UAAtB,EAAkC4H,MAAlC,EAA0C;AACtCF,EAAAA,YAAY,CAAC1H,UAAD,EAAa,QAAb,EAAuB4H,MAAvB,CAAZ;AACH;AAED;;;;;;;;AAMAQ,YAAY,CAAC,YAAD,EAAe,UAAStE,GAAT,EAAcxF,EAAd,EAAkB;AACzC,MAAI,OAAOwF,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAO1H,UAAU,CAACqB,IAAX,CACH,IADG,EAEH,sCAFG,EAGHa,EAHG,CAAP;AAKH;;AAED,OAAKiC,WAAL,GAAmBuD,GAAnB;;AAEA,MAAI3H,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,SAAO,IAAP;AACH,CAhBW,CAAZ;AAkBA;;;;;;;;;;;;AAWA2K,YAAY,CAAC,MAAD,EAAS,UAASxH,CAAT,EAAYC,CAAZ,EAAeR,CAAf,EAAkBC,CAAlB,EAAqB2C,CAArB,EAAwB3E,EAAxB,EAA4B;AAC7C,MAAI,OAAOsC,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAChD,WAAOzE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;AACH;;AAED,MAAI,OAAO+B,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAChD,WAAOlE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;AACH;;AAED,MAAI,OAAO2E,CAAP,KAAa,UAAjB,EAA6B;AACzB,WAAO7G,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,sBAAtB,EAA8Ca,EAA9C,CAAP;AACH,GAX4C,CAa7C;;;AACAsC,EAAAA,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWnC,CAAX,CAAJ;AACAC,EAAAA,CAAC,GAAGiC,IAAI,CAACC,KAAL,CAAWlC,CAAX,CAAJ;AACAR,EAAAA,CAAC,GAAGyC,IAAI,CAACC,KAAL,CAAW1C,CAAX,CAAJ;AACAC,EAAAA,CAAC,GAAGwC,IAAI,CAACC,KAAL,CAAWzC,CAAX,CAAJ;;AAEA,OAAK,IAAI+H,EAAE,GAAGxH,CAAd,EAAiBwH,EAAE,GAAGxH,CAAC,GAAGP,CAA1B,EAA6B+H,EAAE,EAA/B,EAAmC;AAC/B,SAAK,IAAIC,EAAE,GAAG1H,CAAd,EAAiB0H,EAAE,GAAG1H,CAAC,GAAGP,CAA1B,EAA6BiI,EAAE,EAA/B,EAAmC;AAC/B,UAAMxH,GAAG,GAAI,KAAKN,MAAL,CAAYvB,KAAZ,GAAoBoJ,EAApB,GAAyBC,EAA1B,IAAiC,CAA7C;AACArF,MAAAA,CAAC,CAACxF,IAAF,CAAO,IAAP,EAAa6K,EAAb,EAAiBD,EAAjB,EAAqBvH,GAArB;AACH;AACJ;;AAED,MAAI3E,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,SAAO,IAAP;AACH,CA/BW,CAAZ;AAiCA;;;;;;;;;;AASA2K,YAAY,CAAC,MAAD,EAAS,UAASxH,CAAT,EAAYC,CAAZ,EAAeR,CAAf,EAAkBC,CAAlB,EAAqBhC,EAArB,EAAyB;AAC1C,MAAI,OAAOsC,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EACI,OAAOzE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;AACJ,MAAI,OAAO+B,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EACI,OAAOlE,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP,CAJsC,CAM1C;;AACAsC,EAAAA,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWnC,CAAX,CAAJ;AACAC,EAAAA,CAAC,GAAGiC,IAAI,CAACC,KAAL,CAAWlC,CAAX,CAAJ;AACAR,EAAAA,CAAC,GAAGyC,IAAI,CAACC,KAAL,CAAW1C,CAAX,CAAJ;AACAC,EAAAA,CAAC,GAAGwC,IAAI,CAACC,KAAL,CAAWzC,CAAX,CAAJ;AAEA,MAAME,MAAM,GAAGzC,MAAM,CAACC,KAAP,CAAa,KAAKwC,MAAL,CAAY7B,IAAZ,CAAiB3B,MAA9B,CAAf;AACA,MAAIuL,MAAM,GAAG,CAAb;AAEA,OAAK5H,SAAL,CAAeC,CAAf,EAAkBC,CAAlB,EAAqBR,CAArB,EAAwBC,CAAxB,EAA2B,UAASM,CAAT,EAAYC,CAAZ,EAAeC,GAAf,EAAoB;AAC3C,QAAMnC,IAAI,GAAG,KAAK6B,MAAL,CAAY7B,IAAZ,CAAiBoC,YAAjB,CAA8BD,GAA9B,CAAb;AACAN,IAAAA,MAAM,CAACC,aAAP,CAAqB9B,IAArB,EAA2B4J,MAA3B;AACAA,IAAAA,MAAM,IAAI,CAAV;AACH,GAJD;AAMA,OAAK/H,MAAL,CAAY7B,IAAZ,GAAmBZ,MAAM,CAACyK,IAAP,CAAYhI,MAAZ,CAAnB;AACA,OAAKA,MAAL,CAAYvB,KAAZ,GAAoBoB,CAApB;AACA,OAAKG,MAAL,CAAYtB,MAAZ,GAAqBoB,CAArB;;AAEA,MAAInE,aAAa,CAACmC,EAAD,CAAjB,EAAuB;AACnB,WAAOA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAP;AACH;;AAED,SAAO,IAAP;AACH,CA9BW,CAAZ;;AAgCA,IAAIR,OAAO,CAACwL,GAAR,CAAYC,WAAZ,KAA4B,SAAhC,EAA2C;AACvC;;AACA;AACA,MAAIC,EAAJ;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAvD,EAAiE;AAC7DD,IAAAA,EAAE,GAAGC,MAAL;AACH;;AAED,MAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+B,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAAnD,EAA6D;AACzDF,IAAAA,EAAE,GAAGE,IAAL;AACH;;AAEDF,EAAAA,EAAE,CAACxJ,IAAH,GAAUA,IAAV;AACAwJ,EAAAA,EAAE,CAAC5K,MAAH,GAAYA,MAAZ;AACH;;AAED,eAAeoB,IAAf","sourcesContent":["import FS from 'fs';\nimport Path from 'path';\nimport EventEmitter from 'events';\n\nimport anyBase from 'any-base';\nimport bMFont from 'load-bmfont';\nimport MkDirP from 'mkdirp';\nimport pixelMatch from 'pixelmatch';\n\nimport ImagePHash from './modules/phash';\nimport request from './request';\n\nimport * as text from './image-manipulation/text';\nimport * as shape from './image-manipulation/shape';\nimport * as color from './image-manipulation/color';\nimport * as effects from './image-manipulation/effects';\n\nimport promisify from './utils/promisify';\nimport * as MIME from './utils/mime';\nimport { clear } from './utils/log';\nimport { parseBitmap, getBuffer, getBufferAsync } from './utils/image-bitmap';\nimport { isNodePattern, throwError } from './utils/error-checking';\nimport * as constants from './constants';\n\nconst alphabet =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_';\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\n\nfor (let i = 2; i < 65; i++) {\n    const maxHash = anyBase(anyBase.BIN, alphabet.slice(0, i))(\n        new Array(64 + 1).join('1')\n    );\n    maxHashLength.push(maxHash.length);\n}\n\nprocess.on('exit', clear);\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n    return (\n        Object.prototype.toString\n            .call(test)\n            .toLowerCase()\n            .indexOf('arraybuffer') > -1\n    );\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n    const buffer = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction loadBufferFromPath(src, cb) {\n    if (\n        FS &&\n        typeof FS.readFile === 'function' &&\n        !src.match(/^(http|ftp)s?:\\/\\/./)\n    ) {\n        FS.readFile(src, cb);\n    } else {\n        request(src, (err, response, data) => {\n            if (err) {\n                return cb(err);\n            }\n\n            if (typeof data === 'object' && Buffer.isBuffer(data)) {\n                return cb(null, data);\n            }\n\n            const msg =\n                'Could not load Buffer from <' +\n                src +\n                '> ' +\n                '(HTTP: ' +\n                response.statusCode +\n                ')';\n\n            return new Error(msg);\n        });\n    }\n}\n\nconst emptyBitmap = {\n    data: null,\n    width: null,\n    height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends EventEmitter {\n    // An object representing a bitmap in memory, comprising:\n    //  - data: a buffer of the bitmap data\n    //  - width: the width of the image in pixels\n    //  - height: the height of the image in pixels\n    bitmap = emptyBitmap;\n\n    // The quality to be used when saving JPEG images\n    _quality = 100;\n\n    _deflateLevel = 9;\n\n    _deflateStrategy = 3;\n\n    _filterType = Jimp.PNG_FILTER_AUTO;\n\n    // Whether PNGs will be exported as RGB or RGBA\n    _rgba = true;\n\n    // Default colour to use for new pixels\n    _background = 0x00000000;\n\n    // Default MIME is PNG\n    _originalMime = Jimp.MIME_PNG;\n\n    // Exif data for the image\n    _exif = null;\n\n    constructor(...args) {\n        super();\n\n        const jimpInstance = this;\n        let cb = noop;\n\n        if (isArrayBuffer(args[0])) {\n            args[0] = bufferFromArrayBuffer(args[0]);\n        }\n\n        function finish(...args) {\n            const [err] = args;\n            const evData = err || {};\n            evData.methodName = 'constructor';\n\n            setTimeout(() => {\n                // run on next tick.\n                if (err) {\n                    jimpInstance.emitError('constructor', err);\n                } else {\n                    jimpInstance.emitMulti('constructor', 'initialized');\n                }\n\n                cb.call(jimpInstance, ...args);\n            }, 1);\n        }\n\n        if (\n            (typeof args[0] === 'number' && typeof args[1] === 'number') ||\n            (parseInt(args[0], 10) && parseInt(args[1], 10))\n        ) {\n            // create a new image\n            const w = parseInt(args[0], 10);\n            const h = parseInt(args[1], 10);\n            cb = args[2];\n\n            if (typeof args[2] === 'number') {\n                this._background = args[2];\n                cb = args[3];\n            }\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            this.bitmap = {\n                data: Buffer.alloc(w * h * 4),\n                width: w,\n                height: h\n            };\n\n            for (let i = 0; i < this.bitmap.data.length; i += 4) {\n                this.bitmap.data.writeUInt32BE(this._background, i);\n            }\n\n            finish(null, this);\n        } else if (args[0] instanceof Jimp) {\n            // clone an existing Jimp\n            const original = args[0];\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            const bitmap = Buffer.alloc(original.bitmap.data.length);\n            original.scanQuiet(\n                0,\n                0,\n                original.bitmap.width,\n                original.bitmap.height,\n                (x, y, idx) => {\n                    const data = original.bitmap.data.readUInt32BE(idx);\n                    bitmap.writeUInt32BE(data, idx);\n                }\n            );\n\n            this.bitmap = {\n                data: bitmap,\n                width: original.bitmap.width,\n                height: original.bitmap.height\n            };\n\n            this._quality = original._quality;\n            this._deflateLevel = original._deflateLevel;\n            this._deflateStrategy = original._deflateStrategy;\n            this._filterType = original._filterType;\n            this._rgba = original._rgba;\n            this._background = original._background;\n            this._originalMime = original._originalMime;\n\n            finish(null, this);\n        } else if (typeof args[0] === 'string') {\n            // read from a path\n            const path = args[0];\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            loadBufferFromPath(path, (err, data) => {\n                if (err) {\n                    return throwError.call(this, err, finish);\n                }\n\n                parseBitmap.call(this, data, path, finish);\n            });\n        } else if (typeof args[0] === 'object' && Buffer.isBuffer(args[0])) {\n            // read from a buffer\n            const data = args[0];\n            cb = args[1];\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            parseBitmap.call(this, data, null, finish);\n        } else {\n            // Allow client libs to add new ways to build a Jimp object.\n            // Extra constructors must be added by `Jimp.appendConstructorOption()`\n            cb = args[args.length - 1];\n\n            if (typeof cb !== 'function') {\n                // TODO: try to solve the args after cb problem.\n                cb = args[args.length - 2];\n\n                if (typeof cb !== 'function') {\n                    cb = noop;\n                }\n            }\n\n            const extraConstructor = Jimp.__extraConstructors.find(c =>\n                c.test(...args)\n            );\n\n            if (extraConstructor) {\n                new Promise((resolve, reject) =>\n                    extraConstructor.run.call(this, resolve, reject, ...args)\n                )\n                    .then(() => finish(null, this))\n                    .catch(finish);\n            } else {\n                return throwError.call(\n                    this,\n                    'No matching constructor overloading was found. ' +\n                        'Please see the docs for how to call the Jimp constructor.',\n                    finish\n                );\n            }\n        }\n    }\n\n    /**\n     * Emit for multiple listeners\n     * @param {string} methodName name of the method to emit an error for\n     * @param {string} eventName name of the eventName to emit an error for\n     * @param {object} data to emit\n     */\n    emitMulti(methodName, eventName, data = {}) {\n        data = Object.assign(data, { methodName, eventName });\n        this.emit('any', data);\n\n        if (methodName) {\n            this.emit(methodName, data);\n        }\n\n        this.emit(eventName, data);\n    }\n\n    emitError(methodName, err) {\n        this.emitMulti(methodName, 'error', err);\n    }\n\n    /**\n     * Get the current height of the image\n     * @param {number} height of the image\n     */\n    getHeight() {\n        return this.bitmap.height;\n    }\n\n    /**\n     * Get the current width of the image\n     * @param {number} width of the image\n     */\n    getWidth() {\n        return this.bitmap.width;\n    }\n\n    /**\n     * Nicely format Jimp object when sent to the console e.g. console.log(image)\n     * @returns {string} pretty printed\n     */\n    inspect() {\n        return (\n            '<Jimp ' +\n            (this.bitmap === emptyBitmap\n                ? 'pending...'\n                : this.bitmap.width + 'x' + this.bitmap.height) +\n            '>'\n        );\n    }\n\n    /**\n     * Nicely format Jimp object when converted to a string\n     * @returns {string} pretty printed\n     */\n    toString() {\n        return '[object Jimp]';\n    }\n\n    /**\n     * Returns the original MIME of the image (default: \"image/png\")\n     * @returns {string} the MIME\n     */\n    getMIME() {\n        const mime = this._originalMime || Jimp.MIME_PNG;\n\n        return mime;\n    }\n\n    /**\n     * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n     * @returns {string} the file extension\n     */\n    getExtension() {\n        const mime = this.getMIME();\n\n        return MIME.getExtension(mime);\n    }\n\n    /**\n     * Writes the image to a file\n     * @param {string} path a path to the destination file (either PNG or JPEG)\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n     * @returns {Jimp} this for chaining of methods\n     */\n    write(path, cb) {\n        if (!FS || !FS.createWriteStream) {\n            throw new Error(\n                'Cant access the filesystem. You can use the getBase64 method.'\n            );\n        }\n\n        if (typeof path !== 'string') {\n            return throwError.call(this, 'path must be a string', cb);\n        }\n\n        if (typeof cb === 'undefined') {\n            cb = noop;\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        const mime = MIME.getType(path);\n        const pathObj = Path.parse(path);\n\n        if (pathObj.dir) {\n            MkDirP.sync(pathObj.dir);\n        }\n\n        this.getBuffer(mime, (err, buffer) => {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const stream = FS.createWriteStream(path);\n\n            stream\n                .on('open', () => {\n                    stream.write(buffer);\n                    stream.end();\n                })\n                .on('error', err => {\n                    return throwError.call(this, err, cb);\n                });\n            stream.on('finish', () => {\n                return cb.call(this, null, this);\n            });\n        });\n\n        return this;\n    }\n\n    writeAsync = path => promisify(this.write, this, path);\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n        if (typeof l !== 'number') {\n            return throwError.call(this, 'l must be a number', cb);\n        }\n\n        if (l < 0 || l > 9) {\n            return throwError.call(this, 'l must be a number 0 - 9', cb);\n        }\n\n        this._deflateLevel = Math.round(l);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n        if (typeof s !== 'number') {\n            return throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s < 0 || s > 3) {\n            return throwError.call(this, 's must be a number 0 - 3', cb);\n        }\n\n        this._deflateStrategy = Math.round(s);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n        if (typeof f !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (f < -1 || f > 4) {\n            return throwError.call(\n                this,\n                'n must be -1 (auto) or a number 0 - 4',\n                cb\n            );\n        }\n\n        this._filterType = Math.round(f);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n     * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    rgba(bool, cb) {\n        if (typeof bool !== 'boolean') {\n            return throwError.call(\n                this,\n                'bool must be a boolean, true for RGBA or false for RGB',\n                cb\n            );\n        }\n\n        this._rgba = bool;\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n        if (typeof n !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (n < 0 || n > 100) {\n            return throwError.call(this, 'n must be a number 0 - 100', cb);\n        }\n\n        this._quality = Math.round(n);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Converts the image to a base 64 string\n     * @param {string} mime the mime type of the image data to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBase64(mime, cb) {\n        if (mime === Jimp.AUTO) {\n            // allow auto MIME detection\n            mime = this.getMIME();\n        }\n\n        if (typeof mime !== 'string') {\n            return throwError.call(this, 'mime must be a string', cb);\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        this.getBuffer(mime, function(err, data) {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const src = 'data:' + mime + ';base64,' + data.toString('base64');\n            return cb.call(this, null, src);\n        });\n\n        return this;\n    }\n\n    getBase64Async = mime => promisify(this.getBase64, this, mime);\n\n    /**\n     * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>.\n     * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {string} a string representing the hash\n     */\n    hash(base, cb) {\n        base = base || 64;\n\n        if (typeof base === 'function') {\n            cb = base;\n            base = 64;\n        }\n\n        if (typeof base !== 'number') {\n            return throwError.call(this, 'base must be a number', cb);\n        }\n\n        if (base < 2 || base > 64) {\n            return throwError.call(\n                this,\n                'base must be a number between 2 and 64',\n                cb\n            );\n        }\n\n        let hash = new ImagePHash().getHash(this);\n        hash = anyBase(anyBase.BIN, alphabet.slice(0, base))(hash);\n\n        while (hash.length < maxHashLength[base]) {\n            hash = '0' + hash; // pad out with leading zeros\n        }\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, hash);\n        }\n\n        return hash;\n    }\n\n    /**\n     * Converts the image to a buffer\n     * @param {string} mime the mime type of the image buffer to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBuffer = getBuffer;\n\n    getBufferAsync = getBufferAsync;\n\n    /**\n     * Returns the offset of a pixel in the bitmap buffer\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {number} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    getPixelIndex(x, y, edgeHandling, cb) {\n        let xi;\n        let yi;\n\n        if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n            cb = edgeHandling;\n            edgeHandling = null;\n        }\n\n        if (!edgeHandling) {\n            edgeHandling = Jimp.EDGE_EXTEND;\n        }\n\n        if (typeof x !== 'number' || typeof y !== 'number') {\n            return throwError.call(this, 'x and y must be numbers', cb);\n        }\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        xi = x;\n        yi = y;\n\n        if (edgeHandling === Jimp.EDGE_EXTEND) {\n            if (x < 0) xi = 0;\n            if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n            if (y < 0) yi = 0;\n            if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n        }\n\n        if (edgeHandling === Jimp.EDGE_WRAP) {\n            if (x < 0) {\n                xi = this.bitmap.width + x;\n            }\n\n            if (x >= this.bitmap.width) {\n                xi = x % this.bitmap.width;\n            }\n\n            if (y < 0) {\n                xi = this.bitmap.height + y;\n            }\n\n            if (y >= this.bitmap.height) {\n                yi = y % this.bitmap.height;\n            }\n        }\n\n        let i = (this.bitmap.width * yi + xi) << 2;\n\n        // if out of bounds index is -1\n        if (xi < 0 || xi >= this.bitmap.width) {\n            i = -1;\n        }\n\n        if (yi < 0 || yi >= this.bitmap.height) {\n            i = -1;\n        }\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, i);\n        }\n\n        return i;\n    }\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the color of the pixel\n     */\n    getPixelColor(x, y, cb) {\n        if (typeof x !== 'number' || typeof y !== 'number')\n            return throwError.call(this, 'x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        const hex = this.bitmap.data.readUInt32BE(idx);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, hex);\n        }\n\n        return hex;\n    }\n\n    getPixelColour = this.getPixelColor;\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} hex color to set\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    setPixelColor(hex, x, y, cb) {\n        if (\n            typeof hex !== 'number' ||\n            typeof x !== 'number' ||\n            typeof y !== 'number'\n        )\n            return throwError.call(this, 'hex, x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        this.bitmap.data.writeUInt32BE(hex, idx);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    setPixelColour = this.setPixelColor;\n}\n\nObject.entries(constants).forEach(([name, value]) => {\n    Jimp[name] = value;\n});\n\nObject.entries({ ...color, ...shape, ...text, ...effects }).forEach(\n    ([name, value]) => {\n        Jimp.prototype[name] = value;\n    }\n);\n\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function(name, test, run) {\n    Jimp.__extraConstructors.push({ name, test, run });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function(...args) {\n    return new Promise((resolve, reject) => {\n        new Jimp(...args, (err, image) => {\n            if (err) reject(err);\n            else resolve(image);\n        });\n    });\n};\n\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function(r, g, b, a, cb) {\n    if (\n        typeof r !== 'number' ||\n        typeof g !== 'number' ||\n        typeof b !== 'number' ||\n        typeof a !== 'number'\n    ) {\n        return throwError.call(this, 'r, g, b and a must be numbers', cb);\n    }\n\n    if (r < 0 || r > 255) {\n        return throwError.call(this, 'r must be between 0 and 255', cb);\n    }\n\n    if (g < 0 || g > 255) {\n        throwError.call(this, 'g must be between 0 and 255', cb);\n    }\n\n    if (b < 0 || b > 255) {\n        return throwError.call(this, 'b must be between 0 and 255', cb);\n    }\n\n    if (a < 0 || a > 255) {\n        return throwError.call(this, 'a must be between 0 and 255', cb);\n    }\n\n    r = Math.round(r);\n    b = Math.round(b);\n    g = Math.round(g);\n    a = Math.round(a);\n\n    const i =\n        r * Math.pow(256, 3) +\n        g * Math.pow(256, 2) +\n        b * Math.pow(256, 1) +\n        a * Math.pow(256, 0);\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, i);\n    }\n\n    return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function(i, cb) {\n    if (typeof i !== 'number') {\n        return throwError.call(this, 'i must be a number', cb);\n    }\n\n    const rgba = {};\n\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor(\n        (i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n            Math.pow(256, 1)\n    );\n    rgba.a = Math.floor(\n        (i -\n            rgba.r * Math.pow(256, 3) -\n            rgba.g * Math.pow(256, 2) -\n            rgba.b * Math.pow(256, 1)) /\n            Math.pow(256, 0)\n    );\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, rgba);\n    }\n\n    return rgba;\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function(n) {\n    n = Math.max(n, 0);\n    n = Math.min(n, 255);\n\n    return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function(img1, img2, threshold = 0.1) {\n    if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp))\n        return throwError.call(this, 'img1 and img2 must be an Jimp images');\n\n    const bmp1 = img1.bitmap;\n    const bmp2 = img2.bitmap;\n\n    if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n        if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n            // img1 is bigger\n            img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n        } else {\n            // img2 is bigger (or they are the same in area)\n            img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n        }\n    }\n\n    if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n        return throwError.call(\n            this,\n            'threshold must be a number between 0 and 1'\n        );\n    }\n\n    const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n\n    const numDiffPixels = pixelMatch(\n        bmp1.data,\n        bmp2.data,\n        diff.bitmap.data,\n        diff.bitmap.width,\n        diff.bitmap.height,\n        { threshold }\n    );\n\n    return {\n        percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n        image: diff\n    };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function(img1, img2) {\n    const phash = new ImagePHash();\n    const hash1 = phash.getHash(img1);\n    const hash2 = phash.getHash(img2);\n\n    return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function(rgba1, rgba2) {\n    const pow = n => Math.pow(n, 2);\n    const { max } = Math;\n    const maxVal = 255 * 255 * 3;\n\n    if (rgba1.a !== 0 && !rgba1.a) {\n        rgba1.a = 255;\n    }\n\n    if (rgba2.a !== 0 && !rgba2.a) {\n        rgba2.a = 255;\n    }\n\n    return (\n        (max(\n            pow(rgba1.r - rgba2.r),\n            pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)\n        ) +\n            max(\n                pow(rgba1.g - rgba2.g),\n                pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)\n            ) +\n            max(\n                pow(rgba1.b - rgba2.b),\n                pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a)\n            )) /\n        maxVal\n    );\n};\n\nfunction loadPages(dir, pages) {\n    const newPages = pages.map(page => {\n        return Jimp.read(dir + '/' + page);\n    });\n\n    return Promise.all(newPages);\n}\n\n/**\n * Loads a bitmap font from a file\n * @param {string} file the file path of a .fnt file\n * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n * @returns {Promise} a promise\n */\nJimp.loadFont = function(file, cb) {\n    if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n    return new Promise((resolve, reject) => {\n        cb =\n            cb ||\n            function(err, font) {\n                if (err) reject(err);\n                else resolve(font);\n            };\n\n        bMFont(file, (err, font) => {\n            const chars = {};\n            const kernings = {};\n\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            for (let i = 0; i < font.chars.length; i++) {\n                chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n            }\n\n            for (let i = 0; i < font.kernings.length; i++) {\n                const firstString = String.fromCharCode(font.kernings[i].first);\n                kernings[firstString] = kernings[firstString] || {};\n                kernings[firstString][\n                    String.fromCharCode(font.kernings[i].second)\n                ] =\n                    font.kernings[i].amount;\n            }\n\n            loadPages(Path.dirname(file), font.pages).then(pages => {\n                cb(null, {\n                    chars,\n                    kernings,\n                    pages,\n                    common: font.common,\n                    info: font.info\n                });\n            });\n        });\n    });\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nfunction jimpEvMethod(methodName, evName, method) {\n    const evNameBefore = 'before-' + evName;\n    const evNameAfter = evName.replace(/e$/, '') + 'ed';\n\n    Jimp.prototype[methodName] = function(...args) {\n        let wrappedCb;\n        const cb = args[method.length - 1];\n        const jimpInstance = this;\n\n        if (typeof cb === 'function') {\n            wrappedCb = function(...args) {\n                const [err, data] = args;\n\n                if (err) {\n                    jimpInstance.emitError(methodName, err);\n                } else {\n                    jimpInstance.emitMulti(methodName, evNameAfter, {\n                        [methodName]: data\n                    });\n                }\n\n                cb.apply(this, args);\n            };\n            args[args.length - 1] = wrappedCb;\n        } else {\n            wrappedCb = false;\n        }\n\n        this.emitMulti(methodName, evNameBefore);\n\n        let result;\n\n        try {\n            result = method.apply(this, args);\n\n            if (!wrappedCb) {\n                this.emitMulti(methodName, evNameAfter, {\n                    [methodName]: result\n                });\n            }\n        } catch (err) {\n            err.methodName = methodName;\n            this.emitError(methodName, err);\n        }\n\n        return result;\n    };\n\n    Jimp.prototype[methodName + 'Quiet'] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod('clone', 'clone', function(cb) {\n    const clone = new Jimp(this);\n\n    if (isNodePattern(cb)) {\n        return cb.call(clone, null, clone);\n    }\n\n    return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nfunction jimpEvChange(methodName, method) {\n    jimpEvMethod(methodName, 'change', method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('background', function(hex, cb) {\n    if (typeof hex !== 'number') {\n        return throwError.call(\n            this,\n            'hex must be a hexadecimal rgba value',\n            cb\n        );\n    }\n\n    this._background = hex;\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('scan', function(x, y, w, h, f, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof w !== 'number' || typeof h !== 'number') {\n        return throwError.call(this, 'w and h must be numbers', cb);\n    }\n\n    if (typeof f !== 'function') {\n        return throwError.call(this, 'f must be a function', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    for (let _y = y; _y < y + h; _y++) {\n        for (let _x = x; _x < x + w; _x++) {\n            const idx = (this.bitmap.width * _y + _x) << 2;\n            f.call(this, _x, _y, idx);\n        }\n    }\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\n/**\n * Crops the image at a given point to a give size\n * @param {number} x the x coordinate to crop form\n * @param {number} y the y coordinate to crop form\n * @param w the width of the crop region\n * @param h the height of the crop region\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('crop', function(x, y, w, h, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n        return throwError.call(this, 'x and y must be numbers', cb);\n    if (typeof w !== 'number' || typeof h !== 'number')\n        return throwError.call(this, 'w and h must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    const bitmap = Buffer.alloc(this.bitmap.data.length);\n    let offset = 0;\n\n    this.scanQuiet(x, y, w, h, function(x, y, idx) {\n        const data = this.bitmap.data.readUInt32BE(idx);\n        bitmap.writeUInt32BE(data, offset);\n        offset += 4;\n    });\n\n    this.bitmap.data = Buffer.from(bitmap);\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\nif (process.env.ENVIRONMENT === 'BROWSER') {\n    // For use in a web browser or web worker\n    /* global self */\n    let gl;\n\n    if (typeof window !== 'undefined' && typeof window === 'object') {\n        gl = window;\n    }\n\n    if (typeof self !== 'undefined' && typeof self === 'object') {\n        gl = self;\n    }\n\n    gl.Jimp = Jimp;\n    gl.Buffer = Buffer;\n}\n\nexport default Jimp;\n"],"file":"index.js"}